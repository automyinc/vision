
// AUTO GENERATED by vnxcppcodegen

#include <vision/package.hxx>
#include <vision/image_format_e.hxx>
#include <vnx/Input.h>
#include <vnx/Output.h>
#include <vnx/Visitor.h>
#include <vnx/Object.h>
#include <vnx/Struct.h>


namespace vision {


const vnx::Hash64 image_format_e::VNX_TYPE_HASH(0x582c764067a6ea56ull);
const vnx::Hash64 image_format_e::VNX_CODE_HASH(0xcfb93d4815039ea6ull);

vnx::Hash64 image_format_e::get_type_hash() const {
	return VNX_TYPE_HASH;
}

const char* image_format_e::get_type_name() const {
	return "vision.image_format_e";
}

std::shared_ptr<image_format_e> image_format_e::create() {
	return std::make_shared<image_format_e>();
}

std::shared_ptr<image_format_e> image_format_e::clone() const {
	return std::make_shared<image_format_e>(*this);
}

void image_format_e::read(vnx::TypeInput& _in, const vnx::TypeCode* _type_code, const uint16_t* _code) {
	vnx::read(_in, *this, _type_code, _code);
}

void image_format_e::write(vnx::TypeOutput& _out, const vnx::TypeCode* _type_code, const uint16_t* _code) const {
	vnx::write(_out, *this, _type_code, _code);
}

void image_format_e::accept(vnx::Visitor& _visitor) const {
	std::string _name;
	switch(value) {
		case BAYER_BG: _name = "BAYER_BG"; break;
		case BAYER_GB: _name = "BAYER_GB"; break;
		case BAYER_GR: _name = "BAYER_GR"; break;
		case BAYER_RG: _name = "BAYER_RG"; break;
		case BGR: _name = "BGR"; break;
		case CUSTOM: _name = "CUSTOM"; break;
		case HEIGHT_MAP: _name = "HEIGHT_MAP"; break;
		case OPTICAL_FLOW: _name = "OPTICAL_FLOW"; break;
		case RGB: _name = "RGB"; break;
		case RGBA: _name = "RGBA"; break;
		case XYZE: _name = "XYZE"; break;
		case YUV420: _name = "YUV420"; break;
		case YUV420_NV12: _name = "YUV420_NV12"; break;
		case YUV422: _name = "YUV422"; break;
		case ZE: _name = "ZE"; break;
	}
	_visitor.enum_value(value, _name);
}

void image_format_e::write(std::ostream& _out) const {
	switch(value) {
		case BAYER_BG: _out << "\"BAYER_BG\""; break;
		case BAYER_GB: _out << "\"BAYER_GB\""; break;
		case BAYER_GR: _out << "\"BAYER_GR\""; break;
		case BAYER_RG: _out << "\"BAYER_RG\""; break;
		case BGR: _out << "\"BGR\""; break;
		case CUSTOM: _out << "\"CUSTOM\""; break;
		case HEIGHT_MAP: _out << "\"HEIGHT_MAP\""; break;
		case OPTICAL_FLOW: _out << "\"OPTICAL_FLOW\""; break;
		case RGB: _out << "\"RGB\""; break;
		case RGBA: _out << "\"RGBA\""; break;
		case XYZE: _out << "\"XYZE\""; break;
		case YUV420: _out << "\"YUV420\""; break;
		case YUV420_NV12: _out << "\"YUV420_NV12\""; break;
		case YUV422: _out << "\"YUV422\""; break;
		case ZE: _out << "\"ZE\""; break;
		default: _out << value;
	}
}

void image_format_e::read(std::istream& _in) {
	std::string _name;
	vnx::read(_in, _name);
	if(_name == "BAYER_BG") value = 1019334836;
	else if(_name == "BAYER_GB") value = 1081408084;
	else if(_name == "BAYER_GR") value = 289905693;
	else if(_name == "BAYER_RG") value = 334137210;
	else if(_name == "BGR") value = 3118165023;
	else if(_name == "CUSTOM") value = 2218374445;
	else if(_name == "HEIGHT_MAP") value = 2319470177;
	else if(_name == "OPTICAL_FLOW") value = 3019150944;
	else if(_name == "RGB") value = 2689788908;
	else if(_name == "RGBA") value = 672142168;
	else if(_name == "XYZE") value = 2978415047;
	else if(_name == "YUV420") value = 2598799393;
	else if(_name == "YUV420_NV12") value = 3701683859;
	else if(_name == "YUV422") value = 849750138;
	else if(_name == "ZE") value = 2064883057;
	else value = std::atoi(_name.c_str());
}

vnx::Object image_format_e::to_object() const {
	vnx::Object _object;
	_object["value"] = value;
	return _object;
}

void image_format_e::from_object(const vnx::Object& _object) {
	for(const auto& _entry : _object.field) {
		if(_entry.first == "value") {
			_entry.second.to(value);
		}
	}
}

/// \private
std::ostream& operator<<(std::ostream& _out, const image_format_e& _value) {
	_value.write(_out);
	return _out;
}

/// \private
std::istream& operator>>(std::istream& _in, image_format_e& _value) {
	_value.read(_in);
	return _in;
}

const vnx::TypeCode* image_format_e::get_type_code() {
	const vnx::TypeCode* type_code = vnx::get_type_code(vnx::Hash64(0x582c764067a6ea56ull));
	if(!type_code) {
		type_code = vnx::register_type_code(create_type_code());
	}
	return type_code;
}

std::shared_ptr<vnx::TypeCode> image_format_e::create_type_code() {
	std::shared_ptr<vnx::TypeCode> type_code = std::make_shared<vnx::TypeCode>(true);
	type_code->name = "vision.image_format_e";
	type_code->type_hash = vnx::Hash64(0x582c764067a6ea56ull);
	type_code->code_hash = vnx::Hash64(0xcfb93d4815039ea6ull);
	type_code->is_enum = true;
	type_code->create_value = []() -> std::shared_ptr<vnx::Value> { return std::make_shared<vnx::Struct<image_format_e>>(); };
	type_code->fields.resize(1);
	{
		vnx::TypeField& field = type_code->fields[0];
		field.name = "value";
		field.code = {3};
	}
	type_code->enum_map[1019334836] = "BAYER_BG";
	type_code->enum_map[1081408084] = "BAYER_GB";
	type_code->enum_map[289905693] = "BAYER_GR";
	type_code->enum_map[334137210] = "BAYER_RG";
	type_code->enum_map[3118165023] = "BGR";
	type_code->enum_map[2218374445] = "CUSTOM";
	type_code->enum_map[2319470177] = "HEIGHT_MAP";
	type_code->enum_map[3019150944] = "OPTICAL_FLOW";
	type_code->enum_map[2689788908] = "RGB";
	type_code->enum_map[672142168] = "RGBA";
	type_code->enum_map[2978415047] = "XYZE";
	type_code->enum_map[2598799393] = "YUV420";
	type_code->enum_map[3701683859] = "YUV420_NV12";
	type_code->enum_map[849750138] = "YUV422";
	type_code->enum_map[2064883057] = "ZE";
	type_code->build();
	return type_code;
}


} // namespace vision


namespace vnx {

void read(TypeInput& in, ::vision::image_format_e& value, const TypeCode* type_code, const uint16_t* code) {
	if(!type_code) {
		throw std::logic_error("read(): type_code == 0");
	}
	if(code) {
		switch(code[0]) {
			case CODE_STRUCT: type_code = type_code->depends[code[1]]; break;
			case CODE_ALT_STRUCT: type_code = type_code->depends[vnx::flip_bytes(code[1])]; break;
			default: vnx::skip(in, type_code, code); return;
		}
	}
	const char* const _buf = in.read(type_code->total_field_size);
	{
		const vnx::TypeField* const _field = type_code->field_map[0];
		if(_field) {
			vnx::read_value(_buf + _field->offset, value.value, _field->code.data());
		}
	}
	for(const vnx::TypeField* _field : type_code->ext_fields) {
		switch(_field->native_index) {
			default: vnx::skip(in, type_code, _field->code.data());
		}
	}
}

void write(TypeOutput& out, const ::vision::image_format_e& value, const TypeCode* type_code, const uint16_t* code) {
	if(!type_code || (code && code[0] == CODE_ANY)) {
		type_code = vnx::write_type_code<::vision::image_format_e>(out);
		vnx::write_class_header<::vision::image_format_e>(out);
	}
	if(code && code[0] == CODE_STRUCT) {
		type_code = type_code->depends[code[1]];
	}
	char* const _buf = out.write(4);
	vnx::write_value(_buf + 0, value.value);
}

void read(std::istream& in, ::vision::image_format_e& value) {
	value.read(in);
}

void write(std::ostream& out, const ::vision::image_format_e& value) {
	value.write(out);
}

void accept(Visitor& visitor, const ::vision::image_format_e& value) {
	value.accept(visitor);
}

} // vnx
